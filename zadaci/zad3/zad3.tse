version = 4.2

//
// Saved by sw version: 2024.1
//

model "zad3" {
    configuration {
        hil_device = "HIL606"
        hil_configuration_id = 2
        simulation_method = exact
        simulation_time_step = 1e-6
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_analog_outputs_on_sim_stop_mode = Offset values
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = True
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
        dae_solver = "BDF"
        max_sim_step = 1e-4
        simulation_time = 1.0
        abs_tol = 1e-3
        rel_tol = 1e-3
        init_sim_step = 1e-6
        r_on_sw = 1e-3
        v_on_diode = 0.2
        data_sampling_rate = 0
        feedthrough_validation_error_level = error
    }

    component Subsystem Root {
        component "core/Buck - Boost" Buck-Boost {
            carrier_freq = "fsw"
            ctrl_src = "Model"
            d_time = "0"
            ref_sig_min_max = "[0, 1]"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8224
            size = 255, 127
        ]

        component "core/Inductor" L {
            inductance = "L"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8368
            rotation = right
        ]

        component "core/Capacitor" Cout {
            capacitance = "Cout"
            signal_access = "Inherit"
        }
        [
            position = 8752, 8384
            rotation = right
        ]

        component "core/Resistor" RL {
            resistance = "RL"
        }
        [
            position = 8504, 8472
            rotation = right
        ]

        component "core/Voltage Measurement" Vout {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 9112, 8384
            rotation = left
            size = 64, 32
        ]

        component Subsystem Controller {
            layout = dynamic
            component "core/SR Flip Flop" "SR Flip Flop1" {
            }
            [
                position = 8040, 8040
                hide_name = True
            ]

            component "core/Square Wave Source" fsw {
                _tunable = "True"
                duty_cycle = "0.001"
                execution_rate = "Ts"
                frequency = "fsw"
                signal_type = "int"
            }
            [
                position = 7944, 7944
            ]

            component "core/Probe" Imax {
            }
            [
                position = 7928, 8152
            ]

            component "core/Triangular Wave Source" "Slope compensation" {
                _tunable = "True"
                duty_cycle = "0.999"
                execution_rate = "Ts"
                frequency = "fsw"
                max_val = "0"
                min_val = "0"
            }
            [
                position = 7600, 8152
            ]

            component "core/Sum" Sum1 {
                signs = "+-+"
            }
            [
                position = 7776, 8088
                hide_name = True
            ]

            component "core/Sum" Sum2 {
                signs = "+-"
            }
            [
                position = 7200, 8048
                hide_name = True
            ]

            component "core/Sum" Sum3 {
                signs = "+-"
            }
            [
                position = 7056, 8248
                hide_name = True
            ]

            component "core/Constant" "DC Reference input voltage" {
                execution_rate = "Ts"
                value = "Vin"
            }
            [
                position = 6880, 8240
            ]

            component "core/Gain" Gain {
                _tunable = "True"
                gain = "0"
            }
            [
                position = 7168, 8248
            ]

            component "core/Comparator" Comparator1 {
            }
            [
                position = 7928, 8056
                hide_name = True
            ]

            component "core/Multiport signal switch" "Multiport signal switch1" {
                number_of_input_terminals = "3"
            }
            [
                position = 8224, 7776
                hide_name = True
            ]

            component "core/SCADA Input" "Control mode" {
                def_value = "1"
                execution_rate = "Ts"
                max = "3"
                min = "1"
                signal_access = "Inherit"
                unit = ""
            }
            [
                position = 7904, 7576
            ]

            component "core/Sum" Sum4 {
                signs = "+-"
            }
            [
                position = 7536, 7768
                hide_name = True
            ]

            component "core/PID controller" "Voltage mode controller" {
                _tunable = "True"
                controller_type = "PI"
                enb_anti_windup_out = "True"
                enb_output_limit_out = "True"
                ki = "0.1"
                kp = "0.05"
                lower_sat_lim = "0"
                show_reset = "either"
            }
            [
                position = 7840, 7776
            ]

            component "core/Termination" Termination1 {
            }
            [
                position = 8104, 8056
                hide_name = True
            ]

            component "core/Signal switch" "Signal switch1" {
                threshold = "2.5"
            }
            [
                position = 7272, 8064
                hide_name = True
            ]

            component "core/Constant" Constant1 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 7200, 8120
                hide_name = True
            ]

            component "core/Comparator" Comparator2 {
            }
            [
                position = 8120, 7784
                hide_name = True
                scale = 1, -1
            ]

            component "core/Triangular Wave Source" "Triangular Wave Source1" {
                duty_cycle = "0.999"
                execution_rate = "Ts"
                frequency = "fsw"
                max_val = "1"
                min_val = "0"
            }
            [
                position = 8024, 7856
                hide_name = True
            ]

            component "core/Square Wave Source" "Open loop duty ratio" {
                _tunable = "True"
                duty_cycle = "0.001"
                execution_rate = "Ts"
                frequency = "fsw"
                signal_type = "int"
            }
            [
                position = 7904, 7640
            ]

            component "core/Integrator" Integrator {
                show_reset = "either"
            }
            [
                position = 7488, 8072
            ]

            component "core/Gain" K {
                gain = "365.07"
            }
            [
                position = 7368, 8064
            ]

            component "core/Discrete Transfer Function" "Lead regulator" {
                a_coeff = "[1, 1885]"
                b_coeff = "[1, 8.378]"
                domain = "S-domain"
            }
            [
                position = 7600, 8072
            ]

            component "core/Probe" Probe1 {
            }
            [
                position = 7752, 8008
            ]

            component "core/Probe" Probe2 {
            }
            [
                position = 7352, 8192
            ]

            port Isw {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 7952
            ]

            port Control {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8384, 7776
            ]

            port Vout {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 7832
            ]

            port Vin {
                position = left:3
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 8304
            ]

            tag "Reference output voltage" {
                value = "Vout_ref"
                scope = global
                kind = sp
                direction = out
            }
            [
                position = 6880, 7760
                size = 60, 20
            ]

            tag Goto1 {
                value = "ctrl"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8264, 7576
                hide_name = True
                size = 60, 20
            ]

            tag From2 {
                value = "ctrl"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7752, 7784
                hide_name = True
                size = 60, 20
            ]

            tag "Reference output voltage1" {
                value = "Vout_ref"
                scope = global
                kind = sp
                direction = out
            }
            [
                position = 6880, 8040
                size = 60, 20
            ]

            tag Goto2 {
                value = "Vout_measured"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7080, 7864
                hide_name = True
                size = 100, 20
            ]

            tag From3 {
                value = "Vout_measured"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7080, 8056
                hide_name = True
                size = 108, 20
            ]

            tag From4 {
                value = "ctrl"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7200, 7992
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "ctrl"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7368, 8128
                hide_name = True
                size = 60, 20
            ]

            junction Junction4 sp
            [
                position = 8152, 7576
            ]

            junction Junction5 sp
            [
                position = 7008, 7832
            ]

            junction Junction6 sp
            [
                position = 7816, 8088
            ]

            junction Junction7 sp
            [
                position = 7688, 8072
            ]

            junction Junction8 sp
            [
                position = 7312, 8064
            ]

            comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Three types of control:<br />- Open loop control with adjustable duty ratio<br />- Voltage mode control (currently not working)</p><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">- Current mode control  </p></body></html> ENDCOMMENT 
            [
                position = 7824, 8240
            ]

            comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Input disturbance compensator</p></body></html> ENDCOMMENT 
            [
                position = 7040, 8312
            ]

            comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Current mode control regulator with reset feature</p></body></html> ENDCOMMENT 
            [
                position = 7312, 7976
            ]

            connect fsw.out "SR Flip Flop1.s_in" as Connection181
            connect Comparator1.out "SR Flip Flop1.r_in" as Connection182
            connect Isw Comparator1.in1 as Connection196
            [
                breakpoints = 6912, 7952; 7712, 7952; 7712, 7952; 7896, 7952
            ]
            connect Vin Sum3.in1 as Connection198
            connect Sum3.out Gain.in as Connection200
            connect Termination1.in "SR Flip Flop1.out_n" as Connection237
            connect "DC Reference input voltage.out" Sum3.in as Connection298
            [
                breakpoints = 6912, 8240
            ]
            connect Sum4.out "Voltage mode controller.in" as Connection312
            [
                breakpoints = 7576, 7768; 7760, 7768
            ]
            connect "Multiport signal switch1.out" Control as Connection314
            connect From2 "Voltage mode controller.reset" as Connection317
            connect Goto1 Junction4 as Connection318
            connect Junction4 "Control mode.out" as Connection319
            connect "Multiport signal switch1.ctrl" Junction4 as Connection320
            [
                breakpoints = 8200, 7752; 8184, 7752
            ]
            connect "Reference output voltage" Sum4.in as Connection321
            [
                breakpoints = 6992, 7760; 6992, 7760; 7064, 7760
            ]
            connect "Reference output voltage1" Sum2.in as Connection322
            connect From3 Sum2.in1 as Connection327
            connect Sum4.in1 Junction5 as Connection333
            [
                breakpoints = 7496, 7832; 7064, 7832; 7056, 7832; 7056, 7832; 7016, 7832; 7024, 7832
            ]
            connect Junction5 Vout as Connection334
            connect Goto2 Junction5 as Connection335
            [
                breakpoints = 7008, 7864
            ]
            connect Sum2.out "Signal switch1.in" as Connection337
            connect From4 "Signal switch1.in2" as Connection338
            connect Constant1.out "Signal switch1.in1" as Connection339
            connect "Open loop duty ratio.out" "Multiport signal switch1.in" as Connection349
            [
                breakpoints = 8080, 7640; 8080, 7760
            ]
            connect Gain.out Sum1.in2 as Connection353
            connect "Lead regulator.in" Integrator.out as Connection357
            connect From5 Integrator.reset as Connection362
            [
                breakpoints = 7432, 8128; 7432, 8080
            ]
            connect Integrator.in K.out as Connection364
            connect "Slope compensation.out" Sum1.in1 as Connection370
            [
                breakpoints = 7696, 8128; 7696, 8088
            ]
            connect Comparator1.in2 Junction6 as Connection372
            connect Junction6 Sum1.out as Connection373
            connect Imax.in Junction6 as Connection374
            connect "Lead regulator.out" Junction7 as Connection375
            connect Junction7 Sum1.in as Connection376
            connect Probe1.in Junction7 as Connection377
            connect K.in Junction8 as Connection378
            [
                breakpoints = 7328, 8064
            ]
            connect Junction8 "Signal switch1.out" as Connection379
            connect Probe2.in Junction8 as Connection380
            connect Comparator2.out "Multiport signal switch1.in1" as Connection383
            connect "SR Flip Flop1.out" "Multiport signal switch1.in2" as Connection384
            connect Comparator2.in1 "Triangular Wave Source1.out" as Connection385
            connect Comparator2.in2 "Voltage mode controller.out" as Connection386
        }
        [
            position = 8304, 7920
            size = 168, 96
        ]

        component "core/Current Measurement" Isw {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 8296, 8224
            size = 64, 32
        ]

        component "core/Current Measurement" Iout {
            execution_rate = "Ts"
            signal_access = "Inherit"
        }
        [
            position = 9280, 8304
            rotation = left
            size = 64, 32
        ]

        component "core/SCADA Input" "Output voltage" {
            execution_rate = "Ts"
            signal_access = "Inherit"
            unit = ""
        }
        [
            position = 9096, 8680
        ]

        component "core/Signal Controlled Voltage Source" Vin {
        }
        [
            position = 8040, 8384
            rotation = right
            size = 64, 32
        ]

        component "core/Sinusoidal Source" Disturbance {
            _tunable = "True"
            amplitude = "0"
            execution_rate = "Ts"
            frequency = "0.1"
        }
        [
            position = 8112, 8736
        ]

        component "core/SCADA Input" "Enable disturbance" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 8112, 8672
        ]

        component "core/Voltage Measurement" Va1 {
            execution_rate = "Ts"
            signal_access = "Inherit"
        }
        [
            position = 8224, 8384
            rotation = right
            hide_name = True
            size = 64, 32
        ]

        component Subsystem "Input Voltage" {
            layout = dynamic
            component "core/Constant" "No disturbance" {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 7944, 8216
            ]

            component "core/Signal switch" "Signal switch1" {
            }
            [
                position = 8144, 8144
                hide_name = True
            ]

            component "core/Sum" Sum1 {
            }
            [
                position = 8240, 8152
            ]

            component "core/Constant" "Input voltage reference" {
                execution_rate = "Ts"
                value = "Vin"
            }
            [
                position = 8144, 8240
            ]

            port "Input voltage" {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8376, 8152
            ]

            port Enable {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7944, 8048
            ]

            port Disturbance {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7944, 8128
            ]

            connect Sum1.out "Input voltage" as Connection217
            connect "No disturbance.out" "Signal switch1.in1" as Connection221
            connect Disturbance "Signal switch1.in" as Connection222
            connect Enable "Signal switch1.in2" as Connection223
            connect "Signal switch1.out" Sum1.in as Connection214
            connect "Input voltage reference.out" Sum1.in1 as Connection216
        }
        [
            position = 8296, 8696
            size = 168, 88
        ]

        component "core/Resistor" Rb {
            resistance = "Rb"
        }
        [
            position = 8920, 8384
            rotation = right
        ]

        component "core/Single Pole Single Throw Contactor" S {
            ctrl_src = "Model"
            signal_access = "Inherit"
        }
        [
            position = 9192, 8224
            size = 64, 32
        ]

        component "core/SCADA Input" "Turn on load" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 9112, 8128
        ]

        component "core/Variable Resistor" Rload {
        }
        [
            position = 9280, 8384
            rotation = left
            size = 64, 48
        ]

        component "core/SCADA Input" "Load resistance" {
            def_value = "Rload"
            execution_rate = "Ts"
            max = "20"
            min = "0"
            signal_access = "Inherit"
            unit = ""
        }
        [
            position = 9192, 8440
        ]

        tag Goto2 {
            value = "Vout_ref"
            scope = global
            kind = sp
            direction = in
        }
        [
            position = 9176, 8680
            hide_name = True
            size = 60, 20
        ]

        tag Goto3 {
            value = "Vout_measured"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9016, 8384
            rotation = down
            hide_name = True
            size = 100, 20
        ]

        tag From2 {
            value = "Vout_measured"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8096, 7896
            hide_name = True
            size = 108, 20
        ]

        tag Goto4 {
            value = "switch_current"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8208, 8176
            rotation = down
            hide_name = True
            size = 116, 20
        ]

        tag From3 {
            value = "switch_current"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8096, 7920
            hide_name = True
            size = 108, 20
        ]

        tag From5 {
            value = "Vin_ref"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 8384
            rotation = down
            hide_name = True
            size = 68, 20
        ]

        tag Goto6 {
            value = "Vin_ref"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8480, 8696
            hide_name = True
            size = 76, 20
        ]

        tag From7 {
            value = "Vin_ref"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8096, 7944
            hide_name = True
            size = 108, 20
        ]

        junction Junction13 pe
        [
            position = 8504, 8544
        ]

        junction Junction18 pe
        [
            position = 8752, 8544
        ]

        junction Junction25 pe
        [
            position = 8920, 8544
        ]

        junction Junction27 pe
        [
            position = 9112, 8544
        ]

        junction Junction28 pe
        [
            position = 8752, 8224
        ]

        junction Junction29 pe
        [
            position = 8920, 8224
        ]

        junction Junction30 pe
        [
            position = 9112, 8224
        ]

        junction Junction31 pe
        [
            position = 8224, 8224
        ]

        junction Junction32 pe
        [
            position = 8224, 8544
        ]

        connect L.n_node RL.p_node as Connection4
        connect Isw.n_node Buck-Boost.pos_out as Connection103
        connect Buck-Boost.a_in L.p_node as Connection105
        connect Junction13 RL.n_node as Connection204
        [
            breakpoints = 8504, 8544
        ]
        connect Goto3 Vout.out as Connection223
        connect Goto4 Isw.out as Connection225
        connect From5 Vin.in as Connection230
        connect "Input Voltage.Input voltage" Goto6 as Connection231
        connect Disturbance.out "Input Voltage.Disturbance" as Connection232
        connect "Enable disturbance.out" "Input Voltage.Enable" as Connection233
        connect From2 Controller.Vout as Connection302
        connect Goto2 "Output voltage.out" as Connection305
        [
            breakpoints = 9128, 8680
        ]
        connect Junction13 Junction18 as Connection313
        [
            breakpoints = 8504, 8544; 8504, 8544; 8504, 8544; 8744, 8544
        ]
        connect Junction18 Cout.n_node as Connection314
        [
            breakpoints = 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544; 8752, 8544
        ]
        connect Junction18 Junction25 as Connection345
        [
            breakpoints = 8752, 8544; 8888, 8544
        ]
        connect Rb.n_node Junction25 as Connection347
        connect "Turn on load.out" S.ctrl_in as Connection354
        [
            breakpoints = 9192, 8200
        ]
        connect Junction25 Junction27 as Connection358
        [
            breakpoints = 8920, 8544
        ]
        connect Junction27 Vout.p_node as Connection359
        [
            breakpoints = 9112, 8544
        ]
        connect Rload.p_node Junction27 as Connection360
        connect Iout.p_node Rload.n_node as Connection365
        connect Iout.n_node S.a_out as Connection366
        connect Cout.p_node Junction28 as Connection368
        connect Junction28 Buck-Boost.neg_out as Connection369
        [
            breakpoints = 8752, 8224; 8752, 8224; 8752, 8224; 8752, 8224; 8752, 8224; 8752, 8224
        ]
        connect Junction29 Junction28 as Connection372
        connect Rb.p_node Junction29 as Connection373
        connect S.a_in Junction30 as Connection374
        connect Junction30 Junction29 as Connection375
        connect Vout.n_node Junction30 as Connection376
        connect Isw.p_node Junction31 as Connection379
        connect Junction31 Vin.p_node as Connection380
        [
            breakpoints = 8200, 8224
        ]
        connect Va1.p_node Junction31 as Connection381
        connect Junction13 Junction32 as Connection382
        [
            breakpoints = 8504, 8544
        ]
        connect Junction32 Vin.n_node as Connection383
        [
            breakpoints = 8200, 8544
        ]
        connect Va1.n_node Junction32 as Connection384
        connect "Load resistance.out" Rload.In as Connection388
        [
            breakpoints = 9240, 8440
        ]
        connect From7 Controller.Vin as Connection389
        connect From3 Controller.Isw as Connection390
        connect Controller.Control Buck-Boost.s_ctrl as Connection391
    }

    default {
        "core/Capacitor" {
            signal_access = "inherit"
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Comparator" {
            execution_rate = "inherit"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Discrete Transfer Function" {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1,1]"
            a_coeff = "[1,1]"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Gain" {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Inductor" {
            signal_access = "inherit"
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Integrator" {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Multiport signal switch" {
            number_of_input_terminals = "2"
            execution_rate = "inherit"
        }

        "core/PID controller" {
            controller_type = "PID"
            kp = "1"
            kp_source = "internal"
            ki = "1"
            ki_source = "internal"
            kd = "0"
            kd_source = "internal"
            filt_coef = "100"
            int_init_value = "0"
            filt_init_value = "0"
            enb_output_limit_out = "False"
            show_reset = "none"
            upper_sat_lim = "1"
            upper_sat_lim_source = "internal"
            lower_sat_lim = "-1"
            lower_sat_lim_source = "internal"
            enb_anti_windup_out = "False"
            signal_out_type = "inherit"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/SCADA Input" {
            signal_access = "inherit"
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        "core/SR Flip Flop" {
            init_value = "0"
            execution_rate = "inherit"
        }

        "core/Signal switch" {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Sinusoidal Source" {
            amplitude = "1"
            dc_offset = "0"
            frequency = "50"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Square Wave Source" {
            hs_output = "1"
            ls_output = "0"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Sum" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Triangular Wave Source" {
            min_val = "-0.5"
            max_val = "0.5"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Buck - Boost" {
            signal_access = "inherit"
            ctrl_src = "Digital inputs"
            op_mode = "Fixed carrier frequency"
            carrier_freq = "10000.0"
            carr_ph_offset = "0.0"
            d_time = "5e-6"
            ref_sig_min_max = "[-1.0, 1.0]"
            load_mode = "on min"
            execution_rate = "inherit"
            S1 = "1"
            S1_logic = "active high"
            pwm_enabling = "False"
            pwm_enable_di = "13"
            pwm_enable_inv = "active high"
            show_monitoring = "False"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Single Pole Single Throw Contactor" {
            signal_access = "inherit"
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
            switching = "any current"
            hide_int_meas = "False"
        }

        "core/Variable Resistor" {
            inductance = "1e-3"
            initial_current = "0.0"
            hide_int_meas = "False"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        # Plant criteria
        Vin = 12                            # Input voltage
        Vout_min = 5                        # Minimal output voltage
        Vout_max = 20                       # Maximum output voltage
        Vout_list = [Vout_min, Vout_max]    # List of min-max voltages
        
        Rload = 8                           # Load resistance
        Vout_ripple_max = 0.05              # Allowed output voltage ripple
        IL_ripple_max = 0.2                 # Allowed inductor current ripple
        
        fsw = 10e3                          # Switching frequency
        eff = 0.95                          # Worst case efficiency of the converter
        
        Ts = 5e-6                           # Execution rate of signal processing components
        
        # Allowed RL
        """
        Since we want a degree of efficiency of 'eff', we'll calculate the allowed
        parasitic resistance for to achieve it.
        """
        RL_list = {}
        for Vout in Vout_list:
            a = eff * (1 - eff) * Vin**2 * Rload
            b = (eff * Vin + Vout) ** 2
            RL_list[Vout] = a / b
        
        RL = min(RL_list[Vout] for Vout in Vout_list)
        
        # Duty ratio
        """
        Now, we can calculate the duty ratio needed to achieve
        given output voltages.
        """
        D0_list = {}
        for Vout in Vout_list:
            a = -Rload * (Vin + Vout)
            b = -Rload * (Vin + 2 * Vout)
            c = -Vout * (Rload + RL)
            D0_list[Vout] = np.abs(np.roots([a, b, c])[1])
        
        # IL calculation
        """
        For the inductor's inductance, we'll firstly need calculate the
        inductor's current.
        """
        IL_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            a = D0 * Vin
            b = (1 - D0) ** 2 * Rload + RL
            IL_list[Vout] = a / b
        
        # Inductance calculation
        """
        Now, to hold the inductor's current in margins of the given ripple, 
        we'll calculate the inductance needed.
        """
        L_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            a = (1 - D0) * ((1 - D0) * Rload + RL)
            b = 2 * IL_ripple_max * fsw
            L_list[Vout] = a / b
        
        L = max(L_list[Vout] for Vout in Vout_list) + 1e-3
        
        # Capacitance calculation
        """
        Now, to hold the output voltage in margins of the given ripple, 
        we'll calculate the capacitance needed.
        """
        Cout_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            a = D0
            b = 2 * Vout_ripple_max * fsw * Rload
            Cout_list[Vout] = a / b
        
        Cout = max(Cout_list[Vout] for Vout in Vout_list) + 1e-3
        
        # Bleeder resistance
        """
        In order for buck-boost converter to work in continuous conduction mode,
        it needs "to see" some minimal load, so that the inductor current never goes
        lower that its' ripple value.
        """
        Rb_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            Rb_list[Vout] = 1 / (1 - D0) * (2 * fsw * L / (1 - D0) - RL);
        
        Rb = min(Rb_list[Vout] for Vout in Vout_list)
    ENDCODE
}
