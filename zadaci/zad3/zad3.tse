version = 4.2

//
// Saved by sw version: 2024.1
//

model "zad3" {
    configuration {
        hil_device = "VHIL+"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = 1e-6
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_analog_outputs_on_sim_stop_mode = Offset values
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = True
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
        dae_solver = "BDF"
        max_sim_step = 1e-4
        simulation_time = 1.0
        abs_tol = 1e-3
        rel_tol = 1e-3
        init_sim_step = 1e-6
        r_on_sw = 1e-3
        v_on_diode = 0.2
        data_sampling_rate = 0
        feedthrough_validation_error_level = error
    }

    component Subsystem Root {
        component "core/Buck - Boost" Buck-Boost {
            carrier_freq = "fsw"
            ctrl_src = "Model"
            d_time = "0"
            ref_sig_min_max = "[0, 1]"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8224
            size = 255, 127
        ]

        component "core/Inductor" L {
            inductance = "L"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8400
            rotation = right
        ]

        component "core/Capacitor" Cout {
            capacitance = "Cout"
            signal_access = "Inherit"
        }
        [
            position = 8752, 8400
            rotation = right
        ]

        component "core/Resistor" RL {
            resistance = "RL"
        }
        [
            position = 8504, 8504
            rotation = right
        ]

        component "core/Voltage Measurement" Vout {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 9112, 8400
            rotation = left
            size = 64, 32
        ]

        component Subsystem Controller {
            layout = dynamic
            component "core/SR Flip Flop" "SR Flip Flop1" {
            }
            [
                position = 7856, 8040
                hide_name = True
            ]

            component "core/Square Wave Source" fsw {
                _tunable = "True"
                duty_cycle = "0.001"
                execution_rate = "Ts"
                frequency = "fsw"
                signal_type = "int"
            }
            [
                position = 7760, 7944
            ]

            component "core/Probe" Imax {
            }
            [
                position = 7712, 8152
            ]

            component "core/Triangular Wave Source" "Slope compensation" {
                _tunable = "True"
                duty_cycle = "0.999"
                execution_rate = "Ts"
                frequency = "fsw"
                max_val = "0"
                min_val = "0"
            }
            [
                position = 7368, 8120
            ]

            component "core/Sum" Sum1 {
                signs = "+-+"
            }
            [
                position = 7600, 8064
                hide_name = True
            ]

            component "core/Sum" Sum2 {
                signs = "+-"
            }
            [
                position = 7200, 8048
                hide_name = True
            ]

            component "core/Sum" Sum3 {
                signs = "+-"
            }
            [
                position = 6976, 8240
                hide_name = True
            ]

            component "core/Constant" Constant1 {
                execution_rate = "Ts"
                value = "Vin"
            }
            [
                position = 6880, 8200
                hide_name = True
            ]

            component "core/Gain" "Input disturbance compensator" {
                _tunable = "True"
                gain = "0.38"
            }
            [
                position = 7168, 8240
            ]

            component "core/Comparator" Comparator1 {
            }
            [
                position = 7744, 8056
                hide_name = True
            ]

            component "core/Multiport signal switch" "Multiport signal switch1" {
                number_of_input_terminals = "3"
            }
            [
                position = 8064, 7768
                hide_name = True
            ]

            component "core/SCADA Input" "Control mode" {
                def_value = "1"
                execution_rate = "Ts"
                max = "3"
                min = "1"
                signal_access = "Inherit"
                unit = ""
            }
            [
                position = 7960, 7664
            ]

            component "core/Sum" Sum4 {
                signs = "+-"
            }
            [
                position = 7536, 7776
                hide_name = True
            ]

            component "core/PID controller" "Voltage mode controller" {
                _tunable = "True"
                controller_type = "PI"
                enb_anti_windup_out = "True"
                enb_output_limit_out = "True"
                ki = "15"
                kp = "0.05"
                lower_sat_lim = "0"
                upper_sat_lim = "[\'inf\']"
            }
            [
                position = 7680, 7776
            ]

            component "core/Termination" Termination1 {
            }
            [
                position = 7920, 8056
                hide_name = True
            ]

            component "core/Discrete Transfer Function" "Current mode controller" {
                a_coeff = "[12.8, 1.579e4, 0]"
                b_coeff = "[3059, 3.914e4]"
                domain = "S-domain"
            }
            [
                position = 7368, 8048
            ]

            component "core/Square Wave Source" "Open loop duty ratio" {
                _tunable = "True"
                duty_cycle = "0.001"
                execution_rate = "Ts"
                frequency = "fsw"
                signal_type = "int"
            }
            [
                position = 7752, 7672
            ]

            port Isw {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 7952
            ]

            port Control {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8312, 7768
            ]

            port Vout {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 7840
            ]

            port Iout {
                position = left:4
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 8360
            ]

            port Vin {
                position = left:3
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6880, 8288
            ]

            tag "Reference output voltage" {
                value = "OutputVoltageReference"
                scope = global
                kind = sp
                direction = out
            }
            [
                position = 6880, 7768
                size = 60, 20
            ]

            junction Junction1 sp
            [
                position = 7664, 8064
            ]

            junction Junction2 sp
            [
                position = 6992, 7768
            ]

            junction Junction3 sp
            [
                position = 7016, 7840
            ]

            connect fsw.out "SR Flip Flop1.s_in" as Connection181
            connect Comparator1.out "SR Flip Flop1.r_in" as Connection182
            connect Isw Comparator1.in1 as Connection196
            connect Vin Sum3.in1 as Connection198
            connect Constant1.out Sum3.in as Connection199
            connect Sum3.out "Input disturbance compensator.in" as Connection200
            connect Sum4.out "Voltage mode controller.in" as Connection234
            connect Termination1.in "SR Flip Flop1.out_n" as Connection237
            connect "Control mode.out" "Multiport signal switch1.ctrl" as Connection239
            connect "Multiport signal switch1.in1" "Voltage mode controller.out" as Connection243
            connect "Slope compensation.out" Sum1.in1 as Connection247
            [
                breakpoints = 7536, 8120; 7536, 8064
            ]
            connect "Input disturbance compensator.out" Sum1.in2 as Connection249
            [
                breakpoints = 7552, 8240; 7552, 8080
            ]
            connect Sum1.out Junction1 as Connection250
            connect Junction1 Comparator1.in2 as Connection251
            connect Imax.in Junction1 as Connection252
            [
                breakpoints = 7664, 8072
            ]
            connect "Reference output voltage" Junction2 as Connection253
            connect Junction2 Sum4.in as Connection254
            connect Sum2.in Junction2 as Connection255
            connect Vout Junction3 as Connection268
            connect Junction3 Sum4.in1 as Connection269
            [
                breakpoints = 7056, 7840; 7056, 7840; 7496, 7840
            ]
            connect Sum2.in1 Junction3 as Connection270
            [
                breakpoints = 7048, 8056
            ]
            connect Sum2.out "Current mode controller.in" as Connection278
            [
                breakpoints = 7280, 8048
            ]
            connect "Current mode controller.out" Sum1.in as Connection279
            connect "Open loop duty ratio.out" "Multiport signal switch1.in" as Connection282
            [
                breakpoints = 7848, 7672; 7848, 7760
            ]
            connect "SR Flip Flop1.out" "Multiport signal switch1.in2" as Connection286
            [
                breakpoints = 7992, 8024; 7992, 7920; 7992, 7920; 7992, 7792
            ]
            connect "Multiport signal switch1.out" Control as Connection287
        }
        [
            position = 8304, 7920
            size = 168, 96
        ]

        component "core/Current Measurement" Isw {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 8296, 8224
            size = 64, 32
        ]

        component "core/Current Measurement" Iout {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 9280, 8304
            rotation = left
            size = 64, 32
        ]

        component "core/SCADA Input" "Output voltage" {
            execution_rate = "Ts"
            signal_access = "Inherit"
            unit = ""
        }
        [
            position = 9080, 8664
        ]

        component "core/Signal Controlled Voltage Source" Vin {
        }
        [
            position = 8040, 8400
            rotation = right
            size = 64, 32
        ]

        component "core/Sinusoidal Source" Disturbance {
            _tunable = "True"
            amplitude = "0"
            execution_rate = "Ts"
            frequency = "0.1"
        }
        [
            position = 8112, 8728
        ]

        component "core/SCADA Input" "Enable disturbance" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 8112, 8632
        ]

        component "core/Voltage Measurement" Va1 {
            execution_rate = "Ts"
            signal_access = "Inherit"
        }
        [
            position = 8200, 8400
            rotation = right
            hide_name = True
            size = 64, 32
        ]

        component Subsystem "Input Voltage" {
            layout = dynamic
            component "core/Constant" "No disturbance" {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 7944, 8216
            ]

            component "core/Signal switch" "Signal switch1" {
            }
            [
                position = 8144, 8144
                hide_name = True
            ]

            component "core/Sum" Sum1 {
            }
            [
                position = 8240, 8152
            ]

            component "core/Constant" "Input voltage reference" {
                execution_rate = "Ts"
                value = "Vin"
            }
            [
                position = 8144, 8240
            ]

            port "Input voltage" {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8376, 8152
            ]

            port Enable {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7944, 8048
            ]

            port Disturbance {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7944, 8128
            ]

            connect Sum1.out "Input voltage" as Connection217
            connect "No disturbance.out" "Signal switch1.in1" as Connection221
            connect Disturbance "Signal switch1.in" as Connection222
            connect Enable "Signal switch1.in2" as Connection223
            connect "Signal switch1.out" Sum1.in as Connection214
            connect "Input voltage reference.out" Sum1.in1 as Connection216
        }
        [
            position = 8280, 8680
            size = 136, 88
        ]

        component "core/Resistor" Rb {
            resistance = "Rb"
        }
        [
            position = 8920, 8400
            rotation = right
        ]

        component "core/SCADA Input" "Enable buck-boost" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 8304, 8024
        ]

        component "core/Single Pole Single Throw Contactor" S {
            ctrl_src = "Model"
            signal_access = "Inherit"
        }
        [
            position = 9192, 8224
            size = 64, 32
        ]

        component "core/SCADA Input" "Turn on load" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 9048, 8088
        ]

        component "core/Variable Resistor" Rload {
        }
        [
            position = 9280, 8400
            rotation = left
            size = 64, 48
        ]

        component "core/SCADA Input" Load {
            def_value = "Rload"
            execution_rate = "Ts"
            max = "20"
            min = "0"
            signal_access = "Inherit"
            unit = ""
        }
        [
            position = 9192, 8472
        ]

        tag Goto2 {
            value = "OutputVoltageReference"
            scope = global
            kind = sp
            direction = in
        }
        [
            position = 9160, 8664
            hide_name = True
            size = 60, 20
        ]

        tag Goto3 {
            value = "OutputVoltageMeasurement"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9024, 8400
            rotation = down
            hide_name = True
            size = 84, 20
        ]

        tag From2 {
            value = "OutputVoltageMeasurement"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 7872
            hide_name = True
            size = 60, 20
        ]

        tag Goto4 {
            value = "SwitchCurrent"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8240, 8176
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From3 {
            value = "SwitchCurrent"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 7904
            hide_name = True
            size = 60, 20
        ]

        tag From5 {
            value = "InputVoltage"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 8400
            rotation = down
            hide_name = True
            size = 68, 20
        ]

        tag Goto6 {
            value = "InputVoltage"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8432, 8680
            hide_name = True
            size = 76, 20
        ]

        tag Goto7 {
            value = "OutputCurrentMeasurement"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9192, 8304
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From6 {
            value = "OutputCurrentMeasurement"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 7984
            hide_name = True
            size = 60, 20
        ]

        tag From7 {
            value = "InputVoltage"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 7952
            hide_name = True
            size = 60, 20
        ]

        junction Junction13 pe
        [
            position = 8504, 8576
        ]

        junction Junction15 pe
        [
            position = 8200, 8224
        ]

        junction Junction16 pe
        [
            position = 8200, 8576
        ]

        junction Junction18 pe
        [
            position = 8752, 8576
        ]

        junction Junction25 pe
        [
            position = 8920, 8576
        ]

        junction Junction27 pe
        [
            position = 9112, 8576
        ]

        junction Junction28 pe
        [
            position = 8752, 8224
        ]

        junction Junction29 pe
        [
            position = 8920, 8224
        ]

        junction Junction30 pe
        [
            position = 9112, 8224
        ]

        connect L.n_node RL.p_node as Connection4
        connect Isw.n_node Buck-Boost.pos_out as Connection103
        connect Buck-Boost.a_in L.p_node as Connection105
        connect Junction13 RL.n_node as Connection204
        [
            breakpoints = 8504, 8576
        ]
        connect Vin.p_node Junction15 as Connection217
        connect Junction15 Isw.p_node as Connection218
        connect Va1.p_node Junction15 as Connection219
        connect Vin.n_node Junction16 as Connection220
        connect Junction16 Junction13 as Connection221
        connect Va1.n_node Junction16 as Connection222
        connect Goto3 Vout.out as Connection223
        connect Goto4 Isw.out as Connection225
        connect From5 Vin.in as Connection230
        connect "Input Voltage.Input voltage" Goto6 as Connection231
        connect Disturbance.out "Input Voltage.Disturbance" as Connection232
        connect "Enable disturbance.out" "Input Voltage.Enable" as Connection233
        connect From7 Controller.Vin as Connection239
        [
            breakpoints = 8192, 7952; 8192, 7928
        ]
        connect From2 Controller.Vout as Connection302
        connect From6 Controller.Iout as Connection304
        connect Goto2 "Output voltage.out" as Connection305
        [
            breakpoints = 9112, 8664
        ]
        connect Junction13 Junction18 as Connection313
        [
            breakpoints = 8504, 8576; 8504, 8576; 8504, 8576; 8744, 8576
        ]
        connect Junction18 Cout.n_node as Connection314
        [
            breakpoints = 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576
        ]
        connect Junction18 Junction25 as Connection345
        [
            breakpoints = 8752, 8576; 8888, 8576
        ]
        connect Rb.n_node Junction25 as Connection347
        connect "Turn on load.out" S.ctrl_in as Connection354
        [
            breakpoints = 9192, 8200
        ]
        connect Controller.Control Buck-Boost.s_ctrl as Connection355
        connect Junction25 Junction27 as Connection358
        [
            breakpoints = 8920, 8576
        ]
        connect Junction27 Vout.p_node as Connection359
        [
            breakpoints = 9112, 8576
        ]
        connect Rload.p_node Junction27 as Connection360
        connect Load.out Rload.In as Connection361
        connect Controller.Isw From3 as Connection362
        [
            breakpoints = 8192, 7912
        ]
        connect Iout.p_node Rload.n_node as Connection365
        connect Iout.n_node S.a_out as Connection366
        connect Goto7 Iout.out as Connection367
        connect Cout.p_node Junction28 as Connection368
        connect Junction28 Buck-Boost.neg_out as Connection369
        [
            breakpoints = 8752, 8224; 8752, 8224; 8752, 8224; 8752, 8224; 8752, 8224; 8752, 8224
        ]
        connect Junction29 Junction28 as Connection372
        connect Rb.p_node Junction29 as Connection373
        connect S.a_in Junction30 as Connection374
        connect Junction30 Junction29 as Connection375
        connect Vout.n_node Junction30 as Connection376
    }

    default {
        "core/Capacitor" {
            signal_access = "inherit"
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Comparator" {
            execution_rate = "inherit"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Discrete Transfer Function" {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1,1]"
            a_coeff = "[1,1]"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Gain" {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Inductor" {
            signal_access = "inherit"
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Multiport signal switch" {
            number_of_input_terminals = "2"
            execution_rate = "inherit"
        }

        "core/PID controller" {
            controller_type = "PID"
            kp = "1"
            kp_source = "internal"
            ki = "1"
            ki_source = "internal"
            kd = "0"
            kd_source = "internal"
            filt_coef = "100"
            int_init_value = "0"
            filt_init_value = "0"
            enb_output_limit_out = "False"
            show_reset = "none"
            upper_sat_lim = "1"
            upper_sat_lim_source = "internal"
            lower_sat_lim = "-1"
            lower_sat_lim_source = "internal"
            enb_anti_windup_out = "False"
            signal_out_type = "inherit"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/SCADA Input" {
            signal_access = "inherit"
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        "core/SR Flip Flop" {
            init_value = "0"
            execution_rate = "inherit"
        }

        "core/Signal switch" {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Sinusoidal Source" {
            amplitude = "1"
            dc_offset = "0"
            frequency = "50"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Square Wave Source" {
            hs_output = "1"
            ls_output = "0"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Sum" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Triangular Wave Source" {
            min_val = "-0.5"
            max_val = "0.5"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Buck - Boost" {
            signal_access = "inherit"
            ctrl_src = "Digital inputs"
            op_mode = "Fixed carrier frequency"
            carrier_freq = "10000.0"
            carr_ph_offset = "0.0"
            d_time = "5e-6"
            ref_sig_min_max = "[-1.0, 1.0]"
            load_mode = "on min"
            execution_rate = "inherit"
            S1 = "1"
            S1_logic = "active high"
            pwm_enabling = "False"
            pwm_enable_di = "13"
            pwm_enable_inv = "active high"
            show_monitoring = "False"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Single Pole Single Throw Contactor" {
            signal_access = "inherit"
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
            switching = "any current"
            hide_int_meas = "False"
        }

        "core/Variable Resistor" {
            inductance = "1e-3"
            initial_current = "0.0"
            hide_int_meas = "False"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        # Plant criteria
        Vin = 12                            # Input voltage
        Vout_min = 5                        # Minimal output voltage
        Vout_max = 20                       # Maximum output voltage
        Vout_list = [Vout_min, Vout_max]    # List of min-max voltages
        
        Rload = 8                           # Load resistance
        Vout_ripple_max = 0.05              # Allowed output voltage ripple
        IL_ripple_max = 0.2                 # Allowed inductor current ripple
        
        fsw = 10e3                          # Switching frequency
        eff = 0.95                          # Worst case efficiency of the converter
        
        Ts = 5e-6                           # Execution rate of signal processing components
        
        # Allowed RL
        """
        Since we want a degree of efficiency of 'eff', we'll calculate the allowed
        parasitic resistance for to achieve it.
        """
        RL_list = {}
        for Vout in Vout_list:
            a = eff * (1 - eff) * Vin**2 * Rload
            b = (eff * Vin + Vout) ** 2
            RL_list[Vout] = a / b
        
        RL = min(RL_list[Vout] for Vout in Vout_list)
        
        # Duty ratio
        """
        Now, we can calculate the duty ratio needed to achieve
        given output voltages.
        """
        D0_list = {}
        for Vout in Vout_list:
            a = -Rload * (Vin + Vout)
            b = -Rload * (Vin + 2 * Vout)
            c = -Vout * (Rload + RL)
            D0_list[Vout] = np.abs(np.roots([a, b, c])[1])
        
        # IL calculation
        """
        For the inductor's inductance, we'll firstly need calculate the
        inductor's current.
        """
        IL_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            a = D0 * Vin
            b = (1 - D0) ** 2 * Rload + RL
            IL_list[Vout] = a / b
        
        # Inductance calculation
        """
        Now, to hold the inductor's current in margins of the given ripple, 
        we'll calculate the inductance needed.
        """
        L_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            a = (1 - D0) * ((1 - D0) * Rload + RL)
            b = 2 * IL_ripple_max * fsw
            L_list[Vout] = a / b
        
        L = max(L_list[Vout] for Vout in Vout_list) + 1e-3
        
        # Capacitance calculation
        """
        Now, to hold the output voltage in margins of the given ripple, 
        we'll calculate the capacitance needed.
        """
        Cout_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            a = D0
            b = 2 * Vout_ripple_max * fsw * Rload
            Cout_list[Vout] = a / b
        
        Cout = max(Cout_list[Vout] for Vout in Vout_list) + 1e-3
        
        # Bleeder resistance
        """
        In order for buck-boost converter to work in continuous conduction mode,
        it needs some minimal load on itself.
        """
        Rb_list = {}
        for Vout in Vout_list:
            D0 = D0_list[Vout]
            Rb_list[Vout] = 1 / (1 - D0) * (2 * fsw * L / (1 - D0) - RL);
        
        Rb = min(Rb_list[Vout] for Vout in Vout_list)
    ENDCODE
}
