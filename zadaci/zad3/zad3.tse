version = 4.2

//
// Saved by sw version: 2024.1
//

model "zad3" {
    configuration {
        hil_device = "HIL606"
        hil_configuration_id = 2
        simulation_method = exact
        simulation_time_step = 1e-6
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_analog_outputs_on_sim_stop_mode = Offset values
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = True
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
        dae_solver = "BDF"
        max_sim_step = 1e-4
        simulation_time = 1.0
        abs_tol = 1e-3
        rel_tol = 1e-3
        init_sim_step = 1e-6
        r_on_sw = 1e-3
        v_on_diode = 0.2
        data_sampling_rate = 0
        feedthrough_validation_error_level = error
    }

    component Subsystem Root {
        component "core/Buck - Boost" Buck-Boost {
            carrier_freq = "fsw"
            ctrl_src = "Internal modulator"
            d_time = "0"
            ref_sig_min_max = "[0, 1]"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8224
            size = 255, 127
        ]

        component "core/Inductor" L {
            inductance = "L"
            signal_access = "Inherit"
        }
        [
            position = 8504, 8400
            rotation = right
        ]

        component "core/Capacitor" Cout {
            capacitance = "Cout"
            signal_access = "Inherit"
        }
        [
            position = 8752, 8400
            rotation = right
        ]

        component "core/Resistor" RL {
            resistance = "RL"
        }
        [
            position = 8504, 8504
            rotation = right
        ]

        component "core/Voltage Measurement" Vout {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 9136, 8400
            rotation = left
            size = 64, 32
        ]

        component Subsystem Compensator {
            layout = dynamic
            component "core/SR Flip Flop" "SR Flip Flop1" {
            }
            [
                position = 8152, 8056
                hide_name = True
            ]

            component "core/Square Wave Source" fsw {
                _tunable = "True"
                duty_cycle = "0.001"
                execution_rate = "Ts"
                frequency = "fsw"
                signal_type = "int"
            }
            [
                position = 8056, 7960
            ]

            component "core/Probe" Imax {
            }
            [
                position = 7992, 8176
            ]

            component "core/Triangular Wave Source" "Slope compensation" {
                _tunable = "True"
                duty_cycle = "0.99"
                execution_rate = "Ts"
                frequency = "fsw"
                max_val = "0"
                min_val = "0"
            }
            [
                position = 7576, 8144
            ]

            component "core/Sum" Sum1 {
                signs = "+-+"
            }
            [
                position = 7832, 8080
                hide_name = True
            ]

            component "core/Sum" Sum2 {
                signs = "+-"
            }
            [
                position = 7432, 8064
                hide_name = True
            ]

            component "core/PID controller" PID {
                _tunable = "True"
                controller_type = "PI"
                enb_anti_windup_out = "True"
                enb_output_limit_out = "True"
                ki = "15"
                kp = "0.05"
                lower_sat_lim = "0"
                upper_sat_lim = "[\'inf\']"
            }
            [
                position = 7576, 8064
            ]

            component "core/Sum" Sum3 {
                signs = "+-"
            }
            [
                position = 7376, 8392
                hide_name = True
            ]

            component "core/Constant" Constant1 {
                execution_rate = "Ts"
                value = "Vin"
            }
            [
                position = 7280, 8336
                hide_name = True
            ]

            component "core/Gain" Gain1 {
                _tunable = "True"
                gain = "0.38"
            }
            [
                position = 7512, 8392
            ]

            component "core/Digital Probe" "Gate signal" {
            }
            [
                position = 8352, 7976
            ]

            component "core/Comparator" Comparator1 {
            }
            [
                position = 8040, 8072
                hide_name = True
            ]

            component "core/Multiport signal switch" "Multiport signal switch1" {
                number_of_input_terminals = "3"
            }
            [
                position = 8440, 8160
                hide_name = True
            ]

            component "core/SCADA Input" mode {
                execution_rate = "Ts"
                max = "2"
                min = "0"
                signal_access = "Inherit"
                unit = ""
            }
            [
                position = 8248, 8136
            ]

            component "core/SCADA Input" "open loop d" {
                execution_rate = "Ts"
                max = "2"
                min = "0"
                signal_access = "Inherit"
                unit = ""
            }
            [
                position = 8168, 8160
            ]

            component "core/Sum" Sum4 {
                signs = "+-"
            }
            [
                position = 8144, 8328
                hide_name = True
            ]

            component "core/PID controller" PID1 {
                _tunable = "True"
                controller_type = "PI"
                enb_anti_windup_out = "True"
                enb_output_limit_out = "True"
                ki = "15"
                kp = "0.05"
                lower_sat_lim = "0"
                upper_sat_lim = "[\'inf\']"
            }
            [
                position = 8288, 8328
            ]

            component "core/Termination" Termination1 {
            }
            [
                position = 8224, 8072
                hide_name = True
            ]

            port Isw {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7264, 7968
            ]

            port Control {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8504, 8056
            ]

            port Vout {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7264, 8104
            ]

            port Iout {
                position = left:3
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7280, 8248
            ]

            port Vin {
                position = left:4
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7280, 8432
            ]

            port Vout1 {
                position = left:5
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7976, 8368
            ]

            tag Reference {
                value = "OutputVoltageReference"
                scope = global
                kind = sp
                direction = out
            }
            [
                position = 7264, 8040
                size = 60, 20
            ]

            tag Reference1 {
                value = "OutputVoltageReference"
                scope = global
                kind = sp
                direction = out
            }
            [
                position = 7976, 8304
                size = 60, 20
            ]

            junction Junction5 sp
            [
                position = 7952, 8080
            ]

            junction Junction6 sp
            [
                position = 8320, 8064
            ]

            connect fsw.out "SR Flip Flop1.s_in" as Connection181
            connect Comparator1.out "SR Flip Flop1.r_in" as Connection182
            connect Imax.in Junction5 as Connection184
            connect Junction5 Comparator1.in2 as Connection185
            [
                breakpoints = 7952, 8080; 7976, 8080; 7976, 8080; 7976, 8080; 7976, 8080; 7976, 8080
            ]
            connect Sum1.out Junction5 as Connection186
            connect Reference Sum2.in as Connection192
            connect Sum2.in1 Vout as Connection193
            connect Sum2.out PID.in as Connection194
            connect PID.out Sum1.in as Connection195
            [
                breakpoints = 7616, 8064; 7792, 8064
            ]
            connect Isw Comparator1.in1 as Connection196
            connect "Slope compensation.out" Sum1.in1 as Connection197
            [
                breakpoints = 7760, 8144; 7760, 8080
            ]
            connect Vin Sum3.in1 as Connection198
            connect Constant1.out Sum3.in as Connection199
            connect Sum3.out Gain1.in as Connection200
            connect Sum1.in2 Gain1.out as Connection201
            [
                breakpoints = 7784, 8096; 7784, 8392
            ]
            connect "Multiport signal switch1.ctrl" mode.out as Connection226
            connect "open loop d.out" "Multiport signal switch1.in" as Connection227
            connect "SR Flip Flop1.out" Junction6 as Connection229
            [
                breakpoints = 8272, 8064
            ]
            connect Junction6 "Gate signal.in" as Connection230
            [
                breakpoints = 8328, 8064; 8328, 8064; 8328, 8064
            ]
            connect "Multiport signal switch1.in1" Junction6 as Connection231
            connect Reference1 Sum4.in as Connection232
            connect Sum4.in1 Vout1 as Connection233
            connect Sum4.out PID1.in as Connection234
            connect PID1.out "Multiport signal switch1.in2" as Connection235
            connect "Multiport signal switch1.out" Control as Connection236
            connect Termination1.in "SR Flip Flop1.out_n" as Connection237
        }
        [
            position = 8384, 8000
            size = 88, 96
        ]

        component "core/Current Measurement" Isw {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 8296, 8224
            size = 64, 32
        ]

        component "core/Current Measurement" Iout {
            execution_rate = "Ts"
            sig_output = "True"
            signal_access = "Inherit"
        }
        [
            position = 8808, 8224
            rotation = down
            size = 64, 32
        ]

        component "core/SCADA Input" "Output voltage" {
            execution_rate = "Ts"
            signal_access = "Inherit"
            unit = ""
        }
        [
            position = 8744, 8688
        ]

        component Subsystem "Resistance calculation" {
            layout = dynamic
            component "core/Product" Product1 {
            }
            [
                position = 8112, 8096
                hide_name = True
            ]

            component "core/Product" Product2 {
                signs = "*/"
            }
            [
                position = 8208, 8168
                hide_name = True
            ]

            port Power {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 8000, 8176
            ]

            port Resistance {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8352, 8168
            ]

            port Voltage {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 8000, 8088
            ]

            junction Junction10 sp
            [
                position = 8048, 8088
            ]

            connect Product2.out Resistance as Connection101
            connect Product2.in1 Power as Connection100
            connect Junction10 Voltage as Connection102
            connect Junction10 Product1.in as Connection96
            connect Product1.in1 Junction10 as Connection97
            connect Product1.out Product2.in as Connection99
        }
        [
            position = 8968, 8696
            size = 160, 56
        ]

        component "core/Constant" "Output power" {
            execution_rate = "Ts"
            value = "Pout"
        }
        [
            position = 8744, 8760
        ]

        component "core/Signal Controlled Voltage Source" Vin {
        }
        [
            position = 8040, 8400
            rotation = right
            size = 64, 32
        ]

        component "core/Sinusoidal Source" Disturbance {
            _tunable = "True"
            amplitude = "0"
            execution_rate = "Ts"
            frequency = "0.1"
        }
        [
            position = 8040, 8736
        ]

        component "core/SCADA Input" "Enable disturbance" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 8040, 8640
        ]

        component "core/Voltage Measurement" Va1 {
            execution_rate = "Ts"
            signal_access = "Inherit"
        }
        [
            position = 8200, 8400
            rotation = right
            hide_name = True
            size = 64, 32
        ]

        component Subsystem "Input Voltage" {
            layout = dynamic
            component "core/Constant" "No disturbance" {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 7944, 8216
            ]

            component "core/Signal switch" "Signal switch1" {
            }
            [
                position = 8144, 8144
                hide_name = True
            ]

            component "core/Sum" Sum1 {
            }
            [
                position = 8240, 8152
            ]

            component "core/Constant" "Input voltage reference" {
                execution_rate = "Ts"
                value = "Vin"
            }
            [
                position = 8144, 8240
            ]

            port "Input voltage" {
                position = right:1
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8376, 8152
            ]

            port Enable {
                position = left:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7944, 8048
            ]

            port Disturbance {
                position = left:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7944, 8128
            ]

            connect Sum1.out "Input voltage" as Connection217
            connect "No disturbance.out" "Signal switch1.in1" as Connection221
            connect Disturbance "Signal switch1.in" as Connection222
            connect Enable "Signal switch1.in2" as Connection223
            connect "Signal switch1.out" Sum1.in as Connection214
            connect "Input voltage reference.out" Sum1.in1 as Connection216
        }
        [
            position = 8192, 8688
            size = 136, 88
        ]

        component "core/Resistor" R1 {
            resistance = "10"
        }
        [
            position = 8936, 8400
            rotation = right
        ]

        component "core/SCADA Input" "Enable close loop" {
            execution_rate = "Ts"
            format = "int"
            max = "1"
            min = "0"
            signal_access = "Inherit"
            signal_type = "int"
            unit = ""
        }
        [
            position = 8432, 8120
        ]

        tag Goto2 {
            value = "OutputVoltageReference"
            scope = global
            kind = sp
            direction = in
        }
        [
            position = 8832, 8632
            hide_name = True
            size = 60, 20
        ]

        tag Goto3 {
            value = "OutputVoltageMeasurement"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9056, 8400
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From2 {
            value = "OutputVoltageMeasurement"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8240, 7976
            hide_name = True
            size = 60, 20
        ]

        tag Goto4 {
            value = "SwitchCurrent"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8240, 8176
            rotation = down
            hide_name = True
            size = 60, 20
        ]

        tag From3 {
            value = "SwitchCurrent"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8240, 7952
            hide_name = True
            size = 60, 20
        ]

        tag From4 {
            value = "Resistance"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8840, 8400
            hide_name = True
            size = 60, 20
        ]

        tag Goto5 {
            value = "Resistance"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 9120, 8696
            hide_name = True
            size = 60, 20
        ]

        tag From5 {
            value = "InputVoltage"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8120, 8400
            rotation = down
            hide_name = True
            size = 68, 20
        ]

        tag Goto6 {
            value = "InputVoltage"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8344, 8688
            hide_name = True
            size = 76, 20
        ]

        tag Goto7 {
            value = "OutputCurrentMeasurement"
            scope = local
            kind = sp
            direction = in
        }
        [
            position = 8864, 8272
            hide_name = True
            size = 60, 20
        ]

        tag From6 {
            value = "OutputCurrentMeasurement"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8240, 8024
            hide_name = True
            size = 60, 20
        ]

        tag From7 {
            value = "InputVoltage"
            scope = local
            kind = sp
            direction = out
        }
        [
            position = 8240, 8056
            hide_name = True
            size = 60, 20
        ]

        junction Junction13 pe
        [
            position = 8504, 8576
        ]

        junction Junction14 sp
        [
            position = 8784, 8688
        ]

        junction Junction15 pe
        [
            position = 8200, 8224
        ]

        junction Junction16 pe
        [
            position = 8200, 8576
        ]

        junction Junction21 pe
        [
            position = 8752, 8224
        ]

        junction Junction22 pe
        [
            position = 8752, 8576
        ]

        junction Junction23 pe
        [
            position = 8936, 8224
        ]

        junction Junction24 pe
        [
            position = 8936, 8576
        ]

        connect L.n_node RL.p_node as Connection4
        connect Isw.n_node Buck-Boost.pos_out as Connection103
        connect Buck-Boost.a_in L.p_node as Connection105
        connect "Resistance calculation.Power" "Output power.out" as Connection127
        [
            breakpoints = 8824, 8744; 8824, 8760
        ]
        connect Junction13 RL.n_node as Connection204
        [
            breakpoints = 8504, 8576
        ]
        connect "Output voltage.out" Junction14 as Connection208
        connect Junction14 "Resistance calculation.Voltage" as Connection209
        connect Goto2 Junction14 as Connection210
        connect Vin.p_node Junction15 as Connection217
        connect Junction15 Isw.p_node as Connection218
        connect Va1.p_node Junction15 as Connection219
        connect Vin.n_node Junction16 as Connection220
        connect Junction16 Junction13 as Connection221
        connect Va1.n_node Junction16 as Connection222
        connect Goto3 Vout.out as Connection223
        connect Goto4 Isw.out as Connection225
        connect Goto5 "Resistance calculation.Resistance" as Connection229
        connect From5 Vin.in as Connection230
        connect "Input Voltage.Input voltage" Goto6 as Connection231
        connect Disturbance.out "Input Voltage.Disturbance" as Connection232
        connect "Enable disturbance.out" "Input Voltage.Enable" as Connection233
        connect From3 Compensator.Isw as Connection236
        connect From2 Compensator.Vout as Connection237
        [
            breakpoints = 8304, 7976; 8304, 7992
        ]
        connect From6 Compensator.Iout as Connection238
        [
            breakpoints = 8304, 8008
        ]
        connect From7 Compensator.Vin as Connection239
        connect Cout.p_node Junction21 as Connection275
        connect Junction21 Buck-Boost.neg_out as Connection276
        [
            breakpoints = 8752, 8224; 8752, 8224; 8752, 8224
        ]
        connect Iout.n_node Junction21 as Connection277
        connect Iout.out Goto7 as Connection278
        connect Junction22 Junction13 as Connection290
        [
            breakpoints = 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8752, 8576; 8744, 8576; 8504, 8576; 8504, 8576
        ]
        connect Cout.n_node Junction22 as Connection291
        connect Vout.n_node Junction23 as Connection294
        connect Junction23 Iout.p_node as Connection295
        [
            breakpoints = 8928, 8224
        ]
        connect R1.p_node Junction23 as Connection296
        connect Junction22 Junction24 as Connection297
        [
            breakpoints = 8752, 8576; 8800, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8896, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8888, 8576; 8896, 8576; 8928, 8576; 8928, 8576; 8928, 8576
        ]
        connect Junction24 Vout.p_node as Connection298
        connect R1.n_node Junction24 as Connection299
        connect Buck-Boost.In Compensator.Control as Connection300
        connect "Enable close loop.out" Buck-Boost.En as Connection301
    }

    default {
        "core/Capacitor" {
            signal_access = "inherit"
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Comparator" {
            execution_rate = "inherit"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Digital Probe" {
            signal_access = "inherit"
            override_signal_name = "False"
            signal_name = ""
            streaming_en = "False"
            addr = "0"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Gain" {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Inductor" {
            signal_access = "inherit"
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Multiport signal switch" {
            number_of_input_terminals = "2"
            execution_rate = "inherit"
        }

        "core/PID controller" {
            controller_type = "PID"
            kp = "1"
            kp_source = "internal"
            ki = "1"
            ki_source = "internal"
            kd = "0"
            kd_source = "internal"
            filt_coef = "100"
            int_init_value = "0"
            filt_init_value = "0"
            enb_output_limit_out = "False"
            show_reset = "none"
            upper_sat_lim = "1"
            upper_sat_lim_source = "internal"
            lower_sat_lim = "-1"
            lower_sat_lim_source = "internal"
            enb_anti_windup_out = "False"
            signal_out_type = "inherit"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Product" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/SCADA Input" {
            signal_access = "inherit"
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        "core/SR Flip Flop" {
            init_value = "0"
            execution_rate = "inherit"
        }

        "core/Signal switch" {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Sinusoidal Source" {
            amplitude = "1"
            dc_offset = "0"
            frequency = "50"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Square Wave Source" {
            hs_output = "1"
            ls_output = "0"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Sum" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Triangular Wave Source" {
            min_val = "-0.5"
            max_val = "0.5"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Buck - Boost" {
            signal_access = "inherit"
            ctrl_src = "Digital inputs"
            op_mode = "Fixed carrier frequency"
            carrier_freq = "10000.0"
            carr_ph_offset = "0.0"
            d_time = "5e-6"
            ref_sig_min_max = "[-1.0, 1.0]"
            load_mode = "on min"
            execution_rate = "inherit"
            S1 = "1"
            S1_logic = "active high"
            pwm_enabling = "False"
            pwm_enable_di = "13"
            pwm_enable_inv = "active high"
            show_monitoring = "False"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        # Plant criteria
        Vin = 12                            # Input voltage
        Vout_min = 5                        # Minimal output voltage
        Vout_max = 20                       # Maximum output voltage
        Vout_list = [Vout_min, Vout_max]    # List of min-max voltages
        
        Pout = 50                           # Output power
        Vout_ripple_max = 0.05              # Allowed output voltage ripple
        IL_ripple_max = 0.2                 # Allowed inductor current ripple
        
        fsw = 10e3                          # Switching frequency
        eff = 0.95                          # Worst case efficiency of the converter
        
        Ts = 5e-6                           # Execution rate of signal processing components
        
        # Output resistance
        """
        Here, we'll calculate the output resistance needed for having constant power
        of 'Pout' watts. This actually simulates a constant power load.
        """
        Rload_list = {}
        for Vout in Vout_list:
            Rload_list[Vout] = Vout**2 / Pout
        
        # Allowed RL
        """
        Since we want a degree of efficiency of 'eff', we'll calculate the allowed
        parasitic resistance for to achieve it.
        """
        RL_list = {}
        for Vout in Vout_list:
            Rload = Rload_list[Vout]
            a = eff * (1 - eff) * Vin**2 * Rload
            b = (eff * Vin + Vout) ** 2
            RL_list[Vout] = a / b
        
        RL = min(RL_list[Vout] for Vout in Vout_list)
        
        # Duty ratio
        """
        Now, we can calculate the duty ratio needed to achieve
        given output voltages.
        """
        D0_list = {}
        for Vout in Vout_list:
            Rload = Rload_list[Vout]
            a = -Rload * (Vin + Vout)
            b = -Rload * (Vin + 2 * Vout)
            c = -Vout * (Rload + RL)
            D0_list[Vout] = np.abs(np.roots([a, b, c])[1])
            
        info(D0_list)
        
        # IL calculation
        """
        For the inductor's inductance, we'll firstly need calculate the
        inductor's current.
        """
        IL_list = {}
        for Vout in Vout_list:
            Rload = Rload_list[Vout]
            D0 = D0_list[Vout]
            a = D0 * Vin
            b = (1 - D0) ** 2 * Rload + RL
            IL_list[Vout] = a / b
        
        # Inductance calculation
        """
        Now, to hold the inductor's current in margins of the given ripple, 
        we'll calculate the inductance needed.
        """
        L_list = {}
        for Vout in Vout_list:
            Rload = Rload_list[Vout]
            D0 = D0_list[Vout]
            a = (1 - D0) * ((1 - D0) * Rload + RL)
            b = 2 * IL_ripple_max * fsw
            L_list[Vout] = a / b
        
        L = max(L_list[Vout] for Vout in Vout_list) + 1e-3
        info(L)
        
        # Capacitance calculation
        """
        Now, to hold the output voltage in margins of the given ripple, 
        we'll calculate the capacitance needed.
        """
        Cout_list = {}
        for Vout in Vout_list:
            Rload = Rload_list[Vout]
            D0 = D0_list[Vout]
            a = D0
            b = 2 * Vout_ripple_max * fsw * Rload
            Cout_list[Vout] = a / b
        
        Cout = max(Cout_list[Vout] for Vout in Vout_list) + 1e-3
        info(Cout)
    ENDCODE
}
